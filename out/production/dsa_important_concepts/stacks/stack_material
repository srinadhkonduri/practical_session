Stack is pre-defined sub class of vector implementation class

A stack is a linear data structure that follows the Last In, First Out (LIFO) principle,
meaning the last element added is the first to be removed.

The Stack class was introduced in Java 1.0 (initial release of Java in 1996).
It is a part of the legacy collection classes.

import java.util.Stack;

Stack is a subclass of Vector, so it inherits its capacity behavior.

Initial Capacity:
By default, Vector (and hence Stack) starts with an initial capacity of 10.
The initial index value of stack is (0) for storing
The searching value starts form 1 as it follows LIFO algorithm..

When the stack becomes full, its capacity is doubled automatically.
So, after 10 elements, it grows to 20, then 40, and so on.


1. Push
Adds (inserts) an element to the top of the stack.
Example: Pushing 10 onto the stack adds it at the top.

2. Pop
Removes and returns the top element from the stack.
If the stack is empty, this usually throws an Underflow error.

3. Peek / Top
Returns the top element without removing it.
Useful for checking the next item to be popped.

4. isEmpty
Checks if the stack has no elements.
Returns true if the stack is empty, otherwise false.

5. Size
Returns the number of elements in the stack.
if the elements are 6 then it returns 6 elements as output


6. search(Obj) => based on object it returns index value
if object is not there it returns -1